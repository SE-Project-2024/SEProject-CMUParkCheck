<style>
    .info-window{
        padding: 10px;
        max-width: 300px;
    }
    .info-window-link{
        color:blue;
        text-decoration: underline;
        cursor: pointer;
    }
    .info-window-link{
        color:blue;
        text-decoration: underline;
        cursor: pointer;
    }
    .parking-situation-meter {
        position: relative;
        width: 100%;
        height: 20px;
        background-color: whitesmoke;
        display: flex;
        overflow: hidden;
    }
    .positive-feedback, .negative-feedback {
        height: 100%;
    }
    .positive-feedback {
        background-color: green;
        width: 50%;
        transition: width 0.3s ease-in-out;
    }
    .negative-feedback {
        background-color: red;
        width: 50%;
        transition: width 0.3s ease-in-out;
    }
</style>
<div id="map"></div>
<script>
    const openParkingDetails = (id) => {
                    console.log('Opening parking details:', id);
                    window.location.href = `/parking-details/${id}`;
                };
    let map;
    let parkingMarkers = [];
    let buildingMarker = null;
    let userMarker = null;
    const savedLocationKey = 'savedLocation'

    function initMap(){
        console.log('Initializing map...');
        const customMap = [
            {
                featureType: 'poi',
                stylers: [{ visibility: 'off'}]
            },
            {
                featureType: 'transit.station',
                stylers: [{visibility: 'off'}]
            },
            {
                featureType: 'administrative.land_parcel',
                stylers: [{visibility: 'off'}]
            },
            {
                featureType: 'road.local',
                elementType: 'labels',
                stylers: [{ visibility: 'on'}]
            },
            {
                featureType: 'poi.park',
                elementType: 'labels',
                stylers:[{ visibility: 'off'}]
            },
        ];
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 18.800088, lng: 98.95072},
            zoom: 17,
            styles: customMap
        });
    const savedLocation = localStorage.getItem(savedLocationKey);
    if(savedLocation){
        const { latitude, longitude } = JSON.parse(savedLocation);
        const savedLocationPosition = { lat: parseFloat(latitude), lng: parseFloat(longitude)
    };
    userMarker = new google.maps.Marker({
        position: savedLocationPosition,
        map: map,
        title: "Saved Location",
        icon: {
            url: 'img/marker_user_loc.png',
            scaledSize: new google.maps.Size(50, 50)
        }
    });
    const googleMapsLink = `https://www.google.com/maps?q=${latitude},${longitude}`;
    const infoWindowContent = `
        <div class="info-window">
            <h3>Your vehicle is parked here!</h3>
            <p>Lat: ${latitude}, Lng: ${longitude}</p>
            <a href="${googleMapsLink}" target="_blank" class="info-window-link">View in Google Maps</a>
        </div>`;
        const infoWindow = new google.maps.InfoWindow({
            content: infoWindowContent
        });
        userMarker.addListener('click', () => {
            infoWindow.open(map, userMarker);
        });

    map.setCenter(savedLocationPosition);
}

        infoWindow = new google.maps.InfoWindow();

        vehicleTypeMarkers ={
            'car': '/img/marker_car.png',
            'motorbike': '/img/marker_motorbike.png',
        }
    
        fetch(`http://localhost:3000/api/parking_areas`)
        .then(response => response.json())
        .then(data => {
            console.log('Fetched data: ', data);
            data.forEach(parking_area => {
                const iconURL = vehicleTypeMarkers[parking_area.vehicle_type];
                const marker = new google.maps.Marker({
                    position: { lat: parseFloat(parking_area.latitude), lng: parseFloat(parking_area.longitude) },
                    map: map,
                    title: parking_area.name,
                    icon: {
                        url: iconURL,
                        scaledSize: new google.maps.Size(60 , 60)
                    },
                    vehicleType: parking_area.vehicle_type              
                });
                const infoWindowContent = `
                <div class="info-window">
                    <div class="parking-situation-meter">
                        <div class="positive-feedback" id="green-${parking_area.id}"></div>
                        <div class="negative-feedback" id="red-${parking_area.id}"></div>
                    </div>
                    <h3>${parking_area.name}</h3>
                    <p>${parking_area.latitude} , ${parking_area.longitude}</p>
                    <div class="info-window-link" onclick="openParkingDetails(${parking_area.id})">See more</div>
                    </div>
                `;
    
                const infoWindow = new google.maps.InfoWindow({
                    content: infoWindowContent
                });
                marker.addListener('click', () => {
                    console.log(`Clicked on marker: ${parking_area.name}`);
                    infoWindow.setContent(infoWindowContent);
                    infoWindow.open(map, marker);
                    updateMeter(parking_area.id);
                });
                parkingMarkers.push(marker);
            });
        })
        .catch(error => console.error('Error fetching parking areas: ', error));
    }
    function updateMeter(parkingAreaId) {
        fetch(`http://localhost:3000/api/feedback/${parkingAreaId}`)
        .then(response => response.json())
        .then(feedback => {
            console.log(`Feedback data for parking area ${parkingAreaId}: `, feedback);
            const likeCount = feedback.likes ? feedback.likes : 0;
            const dislikeCount = feedback.dislikes ? feedback.dislikes : 0;
            const total = likeCount + dislikeCount;
            let likePercentage = 50;
            let dislikePercentage = 50;

            if (total > 0) {
                likePercentage = (likeCount / total) * 100;
                dislikePercentage = (dislikeCount / total) * 100;
            }

            document.getElementById(`green-${parkingAreaId}`).style.width = `${likePercentage}%`;
            document.getElementById(`red-${parkingAreaId}`).style.width = `${dislikePercentage}%`;
        })
        .catch(error => console.error(`Error fetching feedback for parking area ${parkingAreaId}: `, error));
    }
    function getQueryParam(param){
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(param);
    }
    if (getQueryParam('parkingSaved') === 'true'){
        document.getElementById('message').style.display = 'block';
        history.replaceState(null, '', window.location.pathname);
    }
    document.getElementById('message-close').addEventListener('click', function(){
        document.getElementById('message').style.display = 'none';
    });
</script>
<script src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyARbNYm3tKrpe52ERJZbUhHhVkrUxJrKZE&libraries=geometry&callback=initMap" async defer></script>