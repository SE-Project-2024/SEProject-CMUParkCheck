<%- include("../partials/admin-header") %>
<div class="container-building">
    <select id="building-select" class="manage-building" onchange="updateParkingOptions()">
        <option value="" disabled selected>Select Building</option>
        <% rows.forEach(function(building, index) { %>
            <option value="<%= building.id %>"><%= building.name %></option>
        <% }) %>
    </select>
    <br/>

    <div id="parking-display" class="parking-display"></div> <!-- แสดงพื้นที่จอดรถที่เลือก -->

    <!-- ปุ่มสำหรับกู้คืนพื้นที่จอดรถที่ถูกลบ -->
    <button onclick="restoreRemovedParking()" class="restore-button">Restore Removed Parking</button>
</div>

<style>
.container-building {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    align-items: center; /* จัดกลางในแนวนอน */
}

.manage-building {
    width: 60%; /* ตั้งความกว้างของ dropdown */
    height: 40px;
}

.parking-display {
    margin-top: 20px;
    display: flex;
    flex-direction: column; /* ใช้แนวตั้ง */
    align-items: center; /* จัดกลางในแนวนอน */
}

.parking-box {
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 10px;
    margin: 10px 0;
    background-color: #f9f9f9;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    width: 90%; /* เพิ่มความกว้างของกล่องพื้นที่จอดรถ */
    max-width: 600px; /* กำหนดความกว้างสูงสุดเพื่อไม่ให้กว้างเกินไป */
}

.parking-box h3 {
    margin: 0 0 10px;
    font-size: 18px;
    text-align: center; /* จัดข้อความให้อยู่กลาง */
}

.parking-status {
    font-size: 14px;
    color: gray; /* สีของสถานะ */
}

.status-radio {
    margin-top: 10px; /* เพิ่มระยะห่างด้านบน */
    display: flex; /* ใช้ flexbox */
    align-items: center; /* จัดแนวกลางในแนวตั้ง */
}

.remove-button {
    background-color: #ff4d4d;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 5px 10px;
    cursor: pointer;
    margin-left: auto; /* ให้ปุ่มอยู่ด้านขวา */
}

.restore-button {
    margin-top: 20px;
    background-color: #4CAF50; /* สีเขียว */
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
}
</style>

<script>
    function updateParkingOptions() {
    const buildingSelect = document.getElementById("building-select");
    const parkingDisplay = document.getElementById("parking-display");
    const selectedBuildingId = buildingSelect.value;

    // Clear the previous parking display
    parkingDisplay.innerHTML = '';
    parkingDisplay.style.display = 'none';

    if (selectedBuildingId) {
        console.log('Selected building ID:', selectedBuildingId);
        fetch(`/parking-areas/${selectedBuildingId}`)
            .then(response => {
                console.log('Server response:', response);
                return response.json();
            })
            .then(parkingAreas => {
                console.log('Parking areas:', parkingAreas);
                if (parkingAreas.length > 0) { // Ensure there's data
                    const removedParking = JSON.parse(localStorage.getItem('removedParking')) || [];

                    parkingAreas.forEach(area => {
                        if (!removedParking.includes(area.name) && !document.getElementById(area.name)) {
                            createParkingBox(area.name, parkingDisplay);
                        }
                    });
                    parkingDisplay.style.display = 'block';
                }
            })
            .catch(error => console.error('Error fetching parking areas:', error));
    }
}
    
function createParkingBox(option, parkingDisplay) {
    const parkingBox = document.createElement("div");
    parkingBox.className = "parking-box";
    parkingBox.id = option;  // ใช้ชื่อพื้นที่จอดรถเป็น ID ที่ไม่ซ้ำกัน

    const heading = document.createElement("h3");
    heading.textContent = option; // ชื่อพื้นที่จอดรถ
    parkingBox.appendChild(heading);

    // สร้างฟอร์มสถานะ
    const statusForm = document.createElement("div");
    statusForm.className = "status-radio";

    const activeRadio = document.createElement("input");
    activeRadio.type = "radio";
    activeRadio.id = option + "-active";
    activeRadio.name = option; // ตั้งชื่อกลุ่มให้ตรงกับชื่อพื้นที่
    activeRadio.value = "active";

    const activeLabel = document.createElement("label");
    activeLabel.htmlFor = activeRadio.id;
    activeLabel.textContent = "Active";

    const underConstructionRadio = document.createElement("input");
    underConstructionRadio.type = "radio";
    underConstructionRadio.id = option + "-under-construction";
    underConstructionRadio.name = option;
    underConstructionRadio.value = "under_construction";

    const underConstructionLabel = document.createElement("label");
    underConstructionLabel.htmlFor = underConstructionRadio.id;
    underConstructionLabel.textContent = "Under Construction";

    // เพิ่มปุ่มเลือกและ label ลงในฟอร์ม
    statusForm.appendChild(activeRadio);
    statusForm.appendChild(activeLabel);
    statusForm.appendChild(document.createElement("br")); // แทรกบรรทัดใหม่
    statusForm.appendChild(underConstructionRadio);
    statusForm.appendChild(underConstructionLabel);

    // โหลดสถานะที่บันทึกไว้จาก localStorage
    const parkingStatuses = JSON.parse(localStorage.getItem('parkingStatuses')) || {};
    const savedStatus = parkingStatuses[option];
    if (savedStatus === "active") {
        activeRadio.checked = true; // ตั้งค่า radio เป็น Active
    } else if (savedStatus === "under_construction") {
        underConstructionRadio.checked = true; // ตั้งค่า radio เป็น Under Construction
    }

    // เก็บสถานะเมื่อมีการเลือก
    [activeRadio, underConstructionRadio].forEach(radio => {
        radio.addEventListener("change", () => {
            saveStatus(option, radio.value); // บันทึกสถานะใหม่
        });
    });

    // สร้างปุ่ม Remove
    const removeButton = document.createElement("button");
    removeButton.textContent = "Remove";
    removeButton.className = "remove-button";
    removeButton.onclick = function() {
        parkingDisplay.removeChild(parkingBox); // ลบกล่องพื้นที่จอดรถ
        removeParking(option); // บันทึกพื้นที่ที่ถูกลบ
    };

    statusForm.appendChild(removeButton); // เพิ่มปุ่ม Remove ลงในฟอร์ม
    parkingBox.appendChild(statusForm); // เพิ่มฟอร์มลงในกล่องพื้นที่จอดรถ
    parkingDisplay.appendChild(parkingBox); // เพิ่มกล่องพื้นที่จอดรถลงในการแสดงผล
}

    function saveStatus(parkingAreaName, status) {
    const parkingStatuses = JSON.parse(localStorage.getItem('parkingStatuses')) || {};
    parkingStatuses[parkingAreaName] = status; // บันทึกสถานะใน localStorage
    localStorage.setItem('parkingStatuses', JSON.stringify(parkingStatuses));
}

    function removeParking(option) {
        const removedParking = JSON.parse(localStorage.getItem('removedParking')) || [];
        removedParking.push(option); // เพิ่มพื้นที่จอดรถที่ถูกลบ
        localStorage.setItem('removedParking', JSON.stringify(removedParking)); // บันทึกใน localStorage
    }
    
    function restoreRemovedParking() {
        const removedParking = JSON.parse(localStorage.getItem('removedParking')) || [];
        removedParking.forEach(option => {
            const parkingDisplay = document.getElementById("parking-display");
            
            // ถ้าพื้นที่จอดรถได้รับการกู้คืนแล้วให้ข้ามไป
            if (document.getElementById(option)) return;
            
            createParkingBox(option, parkingDisplay); // กู้คืนพื้นที่จอดรถที่ถูกลบ
        });
        localStorage.setItem('removedParking', JSON.stringify([])); // ล้างข้อมูลพื้นที่จอดรถที่ถูกลบ
    }
</script>